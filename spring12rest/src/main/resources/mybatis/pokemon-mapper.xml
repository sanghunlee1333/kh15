<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="pokemon">
	
	<!-- 
		CRUD 구문을 태그 형식으로 작성
		- 모든 구문에는 ID를 작성해야 함(그래야 호출할 수 있음)
		- resultType에는 이 구문이 반환시킬 데이터의 형태를 작성 
	-->
	<select id="list" resultType="PokemonDto">
		select * from pokemon order by pokemon_no asc
	</select>
	<!-- 
		마이바티스에서는 조회할 때 만들 형태만 알려주며, 
		목록인지 단일데이터인지는 호출할 때 결정 (selectList / selectOne)
	-->	
	<select id="find" resultType="PokemonDto">
		select * from pokemon where pokemon_no = #{pokemonNo}
	</select>
	
	<!-- 
		등록 구문
		- 등록은 실행 결과가 없으므로 resultType이 존재할 수 없음 
		- #{ } 안에 변수명을 배치하면 전달되는 데이터에서 해당 속성을 추출하여 형태에 맞게 자동배치 (동적할당)
	-->
	<insert id="add">
		insert into pokemon(pokemon_no, pokemon_name, pokemon_type)
		values(pokemon_seq.nextval, #{pokemonName}, #{pokemonType})
	</insert>
	
	<!-- 시퀀스 생성 및 등록 -->
	<select id="sequence" resultType="int">
		select pokemon_seq.nextval from dual
	</select>
	<insert id="add2">
		insert into pokemon(pokemon_no, pokemon_name, pokemon_type)
		values(#{pokemonNo}, #{pokemonName}, #{pokemonType})
	</insert>
	
	<!-- 
		삭제
		- 실행하기 위해서는 Primary key 1개만 필요 (지금은 int)
		- 전달되는 데이터가 원시형 1개인 경우 이름은 자유롭게 사용 가능
		- resultType은 작성 금지
	 -->
	<delete id="delete">
		delete pokemon where pokemon_no = #{pokemonNo}
	</delete>
	
	<!-- 
		수정
		- resultType은 작성 금지
	 -->
	<update id="edit">
		update pokemon 
		set 
			pokemon_name=#{pokemonName}, 
			pokemon_type=#{pokemonType}
		where pokemon_no=#{pokemonNo}
	</update>
	
	<!-- 
		컬럼-키워드 검색
		- 구문은 정적할당($) 사용
		- 데이터는 동적할당(#) 사용
	 -->
	<select id="search" resultType="PokemonDto">
		select * from pokemon
		where instr(${column}, #{keyword}) > 0
		order by ${column} asc, pokemon_no asc
	</select>
	
	<!-- 
		목록과 검색을 통합 처리 
		- column + keyword의 유무에 따라 목록 또는 검색을 구현
		- mybatis에서는 && 대신 and, || 대신에 or을 사용
	-->
	<select id="listOrSearch" resultType="PokemonDto">
		select * from pokemon
		<if test="column != null and keyword != null">
		<!-- where instr(${column}, #{keyword}) = 1 --> <!-- 시작검사 -->
		where ${column} like #{keyword} || '%' <!-- 시작검사 -->
 		</if>
		order by 
		<if test="column != null and keyword != null">
		${column} asc,
		</if>
		pokemon_no asc
	</select>
	
</mapper>