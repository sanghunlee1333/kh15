<?xml version="1.0" encoding="UTF-8" ?> <!-- 이 문서는 XML 형식입니다! 그리고 UTF-8 인코딩을 사용할 거예요. 그냥 "이건 XML 문서야~"라고 선언하는 고정 문구라고 생각하면 돼요. -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<!-- 
	<!DOCTYPE.... dtd">
	이건 MyBatis XML 문서 규칙을 불러오는 코드. “MyBatis에서 SQL을 쓸 때 어떤 태그(select, insert 등)를 쓸 수 있는지 알려주는 설명서(DTD)를 연결한다!”
	그래야 MyBatis가 이 XML 파일을 올바르게 해석할 수 있어요.
	- PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" -> "MyBatis 3.0용 매퍼 문서 규격입니다!" 라는 선언
	- "https://mybatis.org/dtd/mybatis-3-mapper.dtd" -> 실제 규칙(DTD) 파일이 있는 주소

즉, 그냥 MyBatis XML 문법을 쓸 수 있도록 허용해주는 선언 
-->
<!--  
	- MyBatis = MyBatis는 자바 코드에서 SQL문을 편하고 쉽게 실행할 수 있게 도와주는 프레임워크
	- SQL을 직접 문자열로 써야 하고, set~ 이런 것도 계속 적어줘야 함 (불편하고 보기 어려움)
	- MyBatis를 쓰면 SQL 따로, 자바 따로! -> 더 깔끔하고 유지보수도 쉬움!

-->

<mapper namespace="pokemon">
<!--
	mapper -> 이 태그는 이 XML이 MyBatis SQL 매퍼 파일이라는 걸 의미. 
	namespace="pokemon" -> 이 매퍼의 이름공간(namespace)을 pokemon으로 설정했음
	
	즉, 이 XML 안의 select, insert 같은 SQL문은 Java 코드에서 pokemon.메서드이름 으로 호출 가능 
-->
	
	<!-- 
		CRUD 구문을 태그 형식으로 작성
		- 모든 구문에는 ID를 작성해야 함(그래야 호출할 수 있음)
		- resultType에는 이 구문이 반환시킬 데이터의 형태를 작성 
	-->
	<select id="list" resultType="PokemonDto">
		select * from pokemon order by pokemon_no asc
	</select>
	<!-- 
		마이바티스에서는 조회할 때 만들 형태만 알려주며, 
		목록인지 단일데이터인지는 호출할 때 결정 (selectList / selectOne)
	-->	
	<select id="find" resultType="PokemonDto">
		select * from pokemon where pokemon_no = #{pokemonNo} 
	</select>
	
	<!-- 
		등록 구문
		- 등록은 실행 결과가 없으므로 resultType이 존재할 수 없음 
		- #{ } 안에 변수명을 배치하면 전달되는 데이터에서 해당 속성을 추출하여 형태에 맞게 자동배치 (동적할당)
		- #{pokemonName}과 #{pokemonType}는 호출되는 메서드에서 넘겨주는 객체의 속성(예: pokemonName과 pokemonType)을 바인딩
	-->
	<insert id="add">
		insert into pokemon(pokemon_no, pokemon_name, pokemon_type)
		values(pokemon_seq.nextval, #{pokemonName}, #{pokemonType})
	</insert>
	
	<!-- 시퀀스 생성 및 등록 -->
	<select id="sequence" resultType="int">
		select pokemon_seq.nextval from dual
	</select>
	<insert id="add2">
		insert into pokemon(pokemon_no, pokemon_name, pokemon_type)
		values(#{pokemonNo}, #{pokemonName}, #{pokemonType})
	</insert>
	
	<!-- 
		삭제
		- 실행하기 위해서는 Primary key 1개만 필요 (지금은 int)
		- 전달되는 데이터가 원시형 1개인 경우 이름은 자유롭게 사용 가능
			- 삭제 메서드에서 int 같은 기본 자료형 하나만 전달하는 경우, MyBatis는 파라미터 1개는 그냥 하나의 값으로 보고, 내부적으로 #{아무이름}을 써도 잘 작동하게 해줌
			- 그래서 #{pokemonNo}, #{no}, #{id} 등 아무 이름 써도 상관없지만(한 개일 때만) 단, 2개 이상 전달할 경우엔 무조건 이름이 정확히 맞아야 함
		- resultType은 작성 금지
	 -->
	<delete id="delete">
		delete pokemon where pokemon_no = #{pokemonNo}
	</delete>
	
	<!-- 
		수정
		- resultType은 작성 금지
	 -->
	<update id="edit">
		update pokemon 
		set 
			pokemon_name=#{pokemonName}, 
			pokemon_type=#{pokemonType}
		where pokemon_no=#{pokemonNo}
	</update>
	
	<!-- 
		컬럼-키워드 검색
		- 구문은 정적할당($) 사용 -> 컬럼명, 테이블명처럼 SQL 문법의 일부는 문자열로 들어가야 해서 직접 집어넣음 -> ${column} → "pokemon_name"이 그대로 SQL에 박힘
		- 데이터는 동적할당(#) 사용 -> 검색어, 숫자 값처럼 사용자 입력은 MyBatis가 안전하게 처리해주기 위해 따로 넣음 (SQL Injection 방지 포함) -> #{keyword} → "피카"라는 값이 따옴표와 함께 들어감
		- instr(col, val) -> val이 col 안에 포함돼 있으면 0보다 큰 숫자 반환 (자바의 .contains() 느낌)
	 -->
	<select id="search" resultType="PokemonDto">
		select * from pokemon
		where instr(${column}, #{keyword}) > 0
		order by ${column} asc, pokemon_no asc
	</select>
	
	<!-- 
		목록과 검색을 통합 처리 
		- column + keyword의 유무에 따라 목록 또는 검색을 구현
		- mybatis에서는 && 대신 and, || 대신에 or을 사용
	-->
	<select id="listOrSearch" resultType="PokemonDto">
		select * from pokemon
		<if test="column != null and keyword != null">
		<!-- where instr(${column}, #{keyword}) = 1 --> <!-- 시작검사 -->
		where ${column} like #{keyword} || '%' <!-- 시작검사 ex) "pokemon_name이 피카로 시작하는 데이터만 가져와!" 라는 뜻. || 은 덧셈 연산자 -->
 		</if>
		order by 
		<if test="column != null and keyword != null">
		${column} asc,
		</if>
		pokemon_no asc
	</select>
	
</mapper>